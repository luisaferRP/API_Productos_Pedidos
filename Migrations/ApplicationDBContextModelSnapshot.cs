// <auto-generated />
using System;
using API_Productos_Pedidos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Productos_Pedidos.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API_Productos_Pedidos.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Things for the home",
                            Name = "Home"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Men's and women's clothing",
                            Name = "Clothing"
                        });
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<int>("userInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userInfoId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_products");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Latest model smartphone with 5G support",
                            Name = "Smartphone",
                            Price = 699.99000000000001,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "High performance laptop for gaming",
                            Name = "Laptop",
                            Price = 999.99000000000001,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "100% cotton T-shirt available in various colors",
                            Name = "T-shirt",
                            Price = 10.99,
                            Stock = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "Comfortable blue jeans, available in multiple sizes",
                            Name = "Jeans",
                            Price = 39.990000000000002,
                            Stock = 50
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "leather furniture",
                            Name = "Furniture",
                            Price = 210.99000000000001,
                            Stock = 20
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "large round mirror",
                            Name = "Mirror",
                            Price = 20.5,
                            Stock = 85
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Noise-cancelling headphones with Bluetooth",
                            Name = "Headphones",
                            Price = 149.99000000000001,
                            Stock = 40
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "Winter jacket to keep you warm",
                            Name = "Jacket",
                            Price = 89.989999999999995,
                            Stock = 25
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Large black refrigerator",
                            Name = "Refrigerator",
                            Price = 234.19999999999999,
                            Stock = 18
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "Extra large bed",
                            Name = "Bed",
                            Price = 120.5,
                            Stock = 12
                        });
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("contact");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Order", b =>
                {
                    b.HasOne("API_Productos_Pedidos.Models.User", "userInfo")
                        .WithMany()
                        .HasForeignKey("userInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInfo");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.OrderProduct", b =>
                {
                    b.HasOne("API_Productos_Pedidos.Models.Order", "order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Productos_Pedidos.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("order");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Product", b =>
                {
                    b.HasOne("API_Productos_Pedidos.Models.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("API_Productos_Pedidos.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
